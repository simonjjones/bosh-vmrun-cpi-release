// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"bosh-vmrun-cpi/driver"
	"sync"
)

type FakeOvftoolRunner struct {
	ImportOvfStub        func(string, string, string) error
	importOvfMutex       sync.RWMutex
	importOvfArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	importOvfReturns struct {
		result1 error
	}
	importOvfReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeOvftoolRunner) ImportOvf(arg1 string, arg2 string, arg3 string) error {
	fake.importOvfMutex.Lock()
	ret, specificReturn := fake.importOvfReturnsOnCall[len(fake.importOvfArgsForCall)]
	fake.importOvfArgsForCall = append(fake.importOvfArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("ImportOvf", []interface{}{arg1, arg2, arg3})
	fake.importOvfMutex.Unlock()
	if fake.ImportOvfStub != nil {
		return fake.ImportOvfStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.importOvfReturns.result1
}

func (fake *FakeOvftoolRunner) ImportOvfCallCount() int {
	fake.importOvfMutex.RLock()
	defer fake.importOvfMutex.RUnlock()
	return len(fake.importOvfArgsForCall)
}

func (fake *FakeOvftoolRunner) ImportOvfArgsForCall(i int) (string, string, string) {
	fake.importOvfMutex.RLock()
	defer fake.importOvfMutex.RUnlock()
	return fake.importOvfArgsForCall[i].arg1, fake.importOvfArgsForCall[i].arg2, fake.importOvfArgsForCall[i].arg3
}

func (fake *FakeOvftoolRunner) ImportOvfReturns(result1 error) {
	fake.ImportOvfStub = nil
	fake.importOvfReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeOvftoolRunner) ImportOvfReturnsOnCall(i int, result1 error) {
	fake.ImportOvfStub = nil
	if fake.importOvfReturnsOnCall == nil {
		fake.importOvfReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.importOvfReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeOvftoolRunner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.importOvfMutex.RLock()
	defer fake.importOvfMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeOvftoolRunner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ driver.OvftoolRunner = new(FakeOvftoolRunner)
